//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\jlips\documents\visual studio 2017\Projects\antlr_test\antlr_test\json.g4 by ANTLR 4.6.4

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace antlr_test {

	using antlr_test.Abstract;
	using antlr_test.Builders;

using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.4")]
[System.CLSCompliant(false)]
public partial class jsonLexer : Lexer {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, STRING=7, TRUE=8, FALSE=9, 
		IDENT=10, NUMBER=11, WHITESPACE=12;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "STRING", "TRUE", "FALSE", 
		"IDENT", "NUMBER", "WHITESPACE", "IDENT_START", "IDENT_MID", "LETTER", 
		"DIGIT", "T", "R", "U", "E", "F", "A", "L", "S"
	};


		IValueBuilder _builder;


	public jsonLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'{'", "','", "'}'", "':'", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, "STRING", "TRUE", "FALSE", "IDENT", 
		"NUMBER", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "json.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\xE\x9A\b\x1\x4"+
		"\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b"+
		"\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4"+
		"\x10\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15"+
		"\t\x15\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x3\x2\x3\x2"+
		"\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\a"+
		"\b\x42\n\b\f\b\xE\b\x45\v\b\x3\b\x3\b\x3\b\a\bJ\n\b\f\b\xE\bM\v\b\x3\b"+
		"\x5\bP\n\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\v"+
		"\x3\v\a\v_\n\v\f\v\xE\v\x62\v\v\x3\f\x6\f\x65\n\f\r\f\xE\f\x66\x3\f\a"+
		"\fj\n\f\f\f\xE\fm\v\f\x3\f\x3\f\a\fq\n\f\f\f\xE\ft\v\f\x5\fv\n\f\x3\r"+
		"\x6\ry\n\r\r\r\xE\rz\x3\r\x3\r\x3\xE\x3\xE\x5\xE\x81\n\xE\x3\xF\x3\xF"+
		"\x5\xF\x85\n\xF\x3\x10\x3\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13"+
		"\x3\x14\x3\x14\x3\x15\x3\x15\x3\x16\x3\x16\x3\x17\x3\x17\x3\x18\x3\x18"+
		"\x3\x19\x3\x19\x2\x2\x2\x1A\x3\x2\x3\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2\a\r"+
		"\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15\x2\f\x17\x2\r\x19\x2\xE\x1B\x2\x2"+
		"\x1D\x2\x2\x1F\x2\x2!\x2\x2#\x2\x2%\x2\x2\'\x2\x2)\x2\x2+\x2\x2-\x2\x2"+
		"/\x2\x2\x31\x2\x2\x3\x2\xE\x5\x2\f\f\xF\xF))\x5\x2\f\f\xF\xF$$\x5\x2\v"+
		"\f\xF\xF\"\"\x4\x2\x43\\\x63|\x4\x2VVvv\x4\x2TTtt\x4\x2WWww\x4\x2GGgg"+
		"\x4\x2HHhh\x4\x2\x43\x43\x63\x63\x4\x2NNnn\x4\x2UUuu\x98\x2\x3\x3\x2\x2"+
		"\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2"+
		"\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2"+
		"\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x3\x33"+
		"\x3\x2\x2\x2\x5\x35\x3\x2\x2\x2\a\x37\x3\x2\x2\x2\t\x39\x3\x2\x2\x2\v"+
		";\x3\x2\x2\x2\r=\x3\x2\x2\x2\xFO\x3\x2\x2\x2\x11Q\x3\x2\x2\x2\x13V\x3"+
		"\x2\x2\x2\x15\\\x3\x2\x2\x2\x17u\x3\x2\x2\x2\x19x\x3\x2\x2\x2\x1B\x80"+
		"\x3\x2\x2\x2\x1D\x84\x3\x2\x2\x2\x1F\x86\x3\x2\x2\x2!\x88\x3\x2\x2\x2"+
		"#\x8A\x3\x2\x2\x2%\x8C\x3\x2\x2\x2\'\x8E\x3\x2\x2\x2)\x90\x3\x2\x2\x2"+
		"+\x92\x3\x2\x2\x2-\x94\x3\x2\x2\x2/\x96\x3\x2\x2\x2\x31\x98\x3\x2\x2\x2"+
		"\x33\x34\a}\x2\x2\x34\x4\x3\x2\x2\x2\x35\x36\a.\x2\x2\x36\x6\x3\x2\x2"+
		"\x2\x37\x38\a\x7F\x2\x2\x38\b\x3\x2\x2\x2\x39:\a<\x2\x2:\n\x3\x2\x2\x2"+
		";<\a]\x2\x2<\f\x3\x2\x2\x2=>\a_\x2\x2>\xE\x3\x2\x2\x2?\x43\a)\x2\x2@\x42"+
		"\n\x2\x2\x2\x41@\x3\x2\x2\x2\x42\x45\x3\x2\x2\x2\x43\x41\x3\x2\x2\x2\x43"+
		"\x44\x3\x2\x2\x2\x44\x46\x3\x2\x2\x2\x45\x43\x3\x2\x2\x2\x46P\a)\x2\x2"+
		"GK\a$\x2\x2HJ\n\x3\x2\x2IH\x3\x2\x2\x2JM\x3\x2\x2\x2KI\x3\x2\x2\x2KL\x3"+
		"\x2\x2\x2LN\x3\x2\x2\x2MK\x3\x2\x2\x2NP\a$\x2\x2O?\x3\x2\x2\x2OG\x3\x2"+
		"\x2\x2P\x10\x3\x2\x2\x2QR\x5#\x12\x2RS\x5%\x13\x2ST\x5\'\x14\x2TU\x5)"+
		"\x15\x2U\x12\x3\x2\x2\x2VW\x5+\x16\x2WX\x5-\x17\x2XY\x5/\x18\x2YZ\x5\x31"+
		"\x19\x2Z[\x5)\x15\x2[\x14\x3\x2\x2\x2\\`\x5\x1B\xE\x2]_\x5\x1D\xF\x2^"+
		"]\x3\x2\x2\x2_\x62\x3\x2\x2\x2`^\x3\x2\x2\x2`\x61\x3\x2\x2\x2\x61\x16"+
		"\x3\x2\x2\x2\x62`\x3\x2\x2\x2\x63\x65\x5!\x11\x2\x64\x63\x3\x2\x2\x2\x65"+
		"\x66\x3\x2\x2\x2\x66\x64\x3\x2\x2\x2\x66g\x3\x2\x2\x2gv\x3\x2\x2\x2hj"+
		"\x5!\x11\x2ih\x3\x2\x2\x2jm\x3\x2\x2\x2ki\x3\x2\x2\x2kl\x3\x2\x2\x2ln"+
		"\x3\x2\x2\x2mk\x3\x2\x2\x2nr\a\x30\x2\x2oq\x5!\x11\x2po\x3\x2\x2\x2qt"+
		"\x3\x2\x2\x2rp\x3\x2\x2\x2rs\x3\x2\x2\x2sv\x3\x2\x2\x2tr\x3\x2\x2\x2u"+
		"\x64\x3\x2\x2\x2uk\x3\x2\x2\x2v\x18\x3\x2\x2\x2wy\t\x4\x2\x2xw\x3\x2\x2"+
		"\x2yz\x3\x2\x2\x2zx\x3\x2\x2\x2z{\x3\x2\x2\x2{|\x3\x2\x2\x2|}\b\r\x2\x2"+
		"}\x1A\x3\x2\x2\x2~\x81\a\x61\x2\x2\x7F\x81\x5\x1F\x10\x2\x80~\x3\x2\x2"+
		"\x2\x80\x7F\x3\x2\x2\x2\x81\x1C\x3\x2\x2\x2\x82\x85\x5\x1B\xE\x2\x83\x85"+
		"\x5!\x11\x2\x84\x82\x3\x2\x2\x2\x84\x83\x3\x2\x2\x2\x85\x1E\x3\x2\x2\x2"+
		"\x86\x87\t\x5\x2\x2\x87 \x3\x2\x2\x2\x88\x89\x4\x32;\x2\x89\"\x3\x2\x2"+
		"\x2\x8A\x8B\t\x6\x2\x2\x8B$\x3\x2\x2\x2\x8C\x8D\t\a\x2\x2\x8D&\x3\x2\x2"+
		"\x2\x8E\x8F\t\b\x2\x2\x8F(\x3\x2\x2\x2\x90\x91\t\t\x2\x2\x91*\x3\x2\x2"+
		"\x2\x92\x93\t\n\x2\x2\x93,\x3\x2\x2\x2\x94\x95\t\v\x2\x2\x95.\x3\x2\x2"+
		"\x2\x96\x97\t\f\x2\x2\x97\x30\x3\x2\x2\x2\x98\x99\t\r\x2\x2\x99\x32\x3"+
		"\x2\x2\x2\xE\x2\x43KO`\x66kruz\x80\x84\x3\x2\x3\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace antlr_test
